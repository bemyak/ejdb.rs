/* automatically generated by rust-bindgen */
use libc::{int32_t, uint32_t, int64_t, uint64_t, uint16_t, uint8_t, size_t, time_t, off_t};

pub const BSON_OK: i32 = 0;
pub const BSON_ERROR: i32 = -1;

pub type HANDLE = ::libc::c_int;
pub type TCCMP =
    ::std::option::Option<extern "C" fn(aptr: *const ::libc::c_char,
                                        asiz: ::libc::c_int,
                                        bptr: *const ::libc::c_char,
                                        bsiz: ::libc::c_int,
                                        op: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type TCCODEC =
    ::std::option::Option<extern "C" fn(ptr: *const ::libc::c_void,
                                        size: ::libc::c_int,
                                        sp: *mut ::libc::c_int,
                                        op: *mut ::libc::c_void)
                              -> *mut ::libc::c_void>;
pub type TCPDPROC =
    ::std::option::Option<extern "C" fn(vbuf: *const ::libc::c_void,
                                        vsiz: ::libc::c_int,
                                        sp: *mut ::libc::c_int,
                                        op: *mut ::libc::c_void)
                              -> *mut ::libc::c_void>;
pub type TCITER =
    ::std::option::Option<extern "C" fn(kbuf: *const ::libc::c_void,
                                        ksiz: ::libc::c_int,
                                        vbuf: *const ::libc::c_void,
                                        vsiz: ::libc::c_int,
                                        op: *mut ::libc::c_void) -> u8>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub ptr: *mut ::libc::c_char,
    pub size: ::libc::c_int,
    pub asize: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TCXSTR = Struct_Unnamed1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub ptr: *mut ::libc::c_char,
    pub size: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TCLISTDATUM = Struct_Unnamed2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub array: *mut TCLISTDATUM,
    pub anum: ::libc::c_int,
    pub start: ::libc::c_int,
    pub num: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TCLIST = Struct_Unnamed3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__TCMAPREC {
    pub ksiz: int32_t,
    pub vsiz: int32_t,
    pub left: *mut Struct__TCMAPREC,
    pub right: *mut Struct__TCMAPREC,
    pub prev: *mut Struct__TCMAPREC,
    pub next: *mut Struct__TCMAPREC,
}
impl ::std::clone::Clone for Struct__TCMAPREC {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__TCMAPREC {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TCMAPREC = Struct__TCMAPREC;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub buckets: *mut *mut TCMAPREC,
    pub first: *mut TCMAPREC,
    pub last: *mut TCMAPREC,
    pub cur: *mut TCMAPREC,
    pub bnum: uint32_t,
    pub rnum: uint64_t,
    pub msiz: uint64_t,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TCMAP = Struct_Unnamed4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__TCTREEREC {
    pub ksiz: int32_t,
    pub vsiz: int32_t,
    pub left: *mut Struct__TCTREEREC,
    pub right: *mut Struct__TCTREEREC,
}
impl ::std::clone::Clone for Struct__TCTREEREC {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__TCTREEREC {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TCTREEREC = Struct__TCTREEREC;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub root: *mut TCTREEREC,
    pub cur: *mut TCTREEREC,
    pub rnum: uint64_t,
    pub msiz: uint64_t,
    pub cmp: TCCMP,
    pub cmpop: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TCTREE = Struct_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub mmtxs: *mut *mut ::libc::c_void,
    pub imtx: *mut ::libc::c_void,
    pub maps: *mut *mut TCMAP,
    pub iter: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TCMDB = Struct_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub mmtx: *mut ::libc::c_void,
    pub tree: *mut TCTREE,
}
impl ::std::clone::Clone for Struct_Unnamed7 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TCNDB = Struct_Unnamed7;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed8 {
    pub ptr: *mut ::libc::c_void,
    pub del: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void)
                                       -> ()>,
}
impl ::std::clone::Clone for Struct_Unnamed8 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TCMPELEM = Struct_Unnamed8;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed9 {
    pub mutex: *mut ::libc::c_void,
    pub elems: *mut TCMPELEM,
    pub anum: ::libc::c_int,
    pub num: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed9 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TCMPOOL = Struct_Unnamed9;
pub type Enum_Unnamed10 = ::libc::c_uint;
pub const TCUNSPACE: ::libc::c_uint = 1;
pub const TCUNLOWER: ::libc::c_uint = 2;
pub const TCUNNOACC: ::libc::c_uint = 4;
pub const TCUNWIDTH: ::libc::c_uint = 8;
pub type Enum_Unnamed11 = ::libc::c_uint;
pub const TCKWMUTAB: ::libc::c_uint = 1;
pub const TCKWMUCTRL: ::libc::c_uint = 2;
pub const TCKWMUBRCT: ::libc::c_uint = 4;
pub const TCKWNOOVER: ::libc::c_uint = 16777216;
pub const TCKWPULEAD: ::libc::c_uint = 33554432;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed12 {
    pub seq: uint32_t,
    pub hash: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed12 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed12 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TCCHIDXNODE = Struct_Unnamed12;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed13 {
    pub nodes: *mut TCCHIDXNODE,
    pub nnum: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed13 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed13 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TCCHIDX = Struct_Unnamed13;
pub type Enum_Unnamed14 = ::libc::c_uint;
pub const TCFSTART: ::libc::c_uint = 0;
pub const TCFCUR: ::libc::c_uint = 1;
pub const TCFEND: ::libc::c_uint = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed15 {
    pub elems: *mut TCLIST,
    pub begsep: *mut ::libc::c_char,
    pub endsep: *mut ::libc::c_char,
    pub conf: *mut TCMAP,
}
impl ::std::clone::Clone for Struct_Unnamed15 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed15 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TCTMPL = Struct_Unnamed15;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed16 {
    pub array: *mut *mut ::libc::c_void,
    pub anum: ::libc::c_int,
    pub start: ::libc::c_int,
    pub num: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed16 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed16 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TCPTRLIST = Struct_Unnamed16;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed17 {
    pub sp: *mut uint8_t,
    pub cp: *mut uint8_t,
    pub idx: ::libc::c_int,
    pub size: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed17 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed17 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TCBITSTRM = Struct_Unnamed17;
pub type TCBITMAP = ::libc::c_uchar;
pub type Enum_Unnamed18 = ::libc::c_uint;
pub const TCESUCCESS: ::libc::c_uint = 0;
pub const TCETHREAD: ::libc::c_uint = 1;
pub const TCEINVALID: ::libc::c_uint = 2;
pub const TCENOFILE: ::libc::c_uint = 3;
pub const TCENOPERM: ::libc::c_uint = 4;
pub const TCEMETA: ::libc::c_uint = 5;
pub const TCERHEAD: ::libc::c_uint = 6;
pub const TCEOPEN: ::libc::c_uint = 7;
pub const TCECLOSE: ::libc::c_uint = 8;
pub const TCETRUNC: ::libc::c_uint = 9;
pub const TCESYNC: ::libc::c_uint = 10;
pub const TCESTAT: ::libc::c_uint = 11;
pub const TCESEEK: ::libc::c_uint = 12;
pub const TCEREAD: ::libc::c_uint = 13;
pub const TCEWRITE: ::libc::c_uint = 14;
pub const TCEMMAP: ::libc::c_uint = 15;
pub const TCELOCK: ::libc::c_uint = 16;
pub const TCEUNLINK: ::libc::c_uint = 17;
pub const TCERENAME: ::libc::c_uint = 18;
pub const TCEMKDIR: ::libc::c_uint = 19;
pub const TCERMDIR: ::libc::c_uint = 20;
pub const TCEKEEP: ::libc::c_uint = 21;
pub const TCENOREC: ::libc::c_uint = 22;
pub const TCETR: ::libc::c_uint = 23;
pub const TCEICOMPRESS: ::libc::c_uint = 24;
pub const TCEDATACOMPRESS: ::libc::c_uint = 25;
pub const TCEMISC: ::libc::c_uint = 9999;
pub type Enum_Unnamed19 = ::libc::c_uint;
pub const TCDBTHASH: ::libc::c_uint = 0;
pub const TCDBTBTREE: ::libc::c_uint = 1;
pub const TCDBTFIXED: ::libc::c_uint = 2;
pub const TCDBTTABLE: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed20 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed20 {
    pub unsafe fn i(&mut self) -> *mut int32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn l(&mut self) -> *mut int64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn d(&mut self) -> *mut ::libc::c_double {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn p(&mut self) -> *mut *mut ::libc::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn f(&mut self) -> *mut TCCMP {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed20 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed20 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type tcgeneric_t = Union_Unnamed20;
pub type Enum_bson_error_t = ::libc::c_uint;
pub const BSON_SIZE_OVERFLOW: ::libc::c_uint = 1;
pub type Enum_bson_validity_t = ::libc::c_uint;
pub const BSON_VALID: ::libc::c_uint = 0;
pub const BSON_NOT_UTF8: ::libc::c_uint = 2;
pub const BSON_FIELD_HAS_DOT: ::libc::c_uint = 4;
pub const BSON_FIELD_INIT_DOLLAR: ::libc::c_uint = 8;
pub const BSON_ALREADY_FINISHED: ::libc::c_uint = 16;
pub const BSON_ERROR_ANY: ::libc::c_uint = 32;
pub const BSON_NOT_FINISHED: ::libc::c_uint = 64;
pub type Enum_bson_binary_subtype_t = ::libc::c_uint;
pub const BSON_BIN_BINARY: ::libc::c_uint = 0;
pub const BSON_BIN_FUNC: ::libc::c_uint = 1;
pub const BSON_BIN_BINARY_OLD: ::libc::c_uint = 2;
pub const BSON_BIN_UUID: ::libc::c_uint = 3;
pub const BSON_BIN_MD5: ::libc::c_uint = 5;
pub const BSON_BIN_USER: ::libc::c_uint = 128;
pub type Enum_bson_flags_t = ::libc::c_uint;
pub const BSON_FLAG_QUERY_MODE: ::libc::c_uint = 1;
pub const BSON_FLAG_STACK_ALLOCATED: ::libc::c_uint = 2;
pub type Enum_Unnamed21 = ::libc::c_uint;
pub const BSON_EOO: ::libc::c_uint = 0;
pub const BSON_DOUBLE: ::libc::c_uint = 1;
pub const BSON_STRING: ::libc::c_uint = 2;
pub const BSON_OBJECT: ::libc::c_uint = 3;
pub const BSON_ARRAY: ::libc::c_uint = 4;
pub const BSON_BINDATA: ::libc::c_uint = 5;
pub const BSON_UNDEFINED: ::libc::c_uint = 6;
pub const BSON_OID: ::libc::c_uint = 7;
pub const BSON_BOOL: ::libc::c_uint = 8;
pub const BSON_DATE: ::libc::c_uint = 9;
pub const BSON_NULL: ::libc::c_uint = 10;
pub const BSON_REGEX: ::libc::c_uint = 11;
pub const BSON_DBREF: ::libc::c_uint = 12;
pub const BSON_CODE: ::libc::c_uint = 13;
pub const BSON_SYMBOL: ::libc::c_uint = 14;
pub const BSON_CODEWSCOPE: ::libc::c_uint = 15;
pub const BSON_INT: ::libc::c_uint = 16;
pub const BSON_TIMESTAMP: ::libc::c_uint = 17;
pub const BSON_LONG: ::libc::c_uint = 18;
pub type bson_type = Enum_Unnamed21;
pub type bson_bool_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed22 {
    pub cur: *const ::libc::c_char,
    pub first: bson_bool_t,
}
impl ::std::clone::Clone for Struct_Unnamed22 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed22 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type bson_iterator = Struct_Unnamed22;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed23 {
    pub data: *mut ::libc::c_char,
    pub cur: *mut ::libc::c_char,
    pub dataSize: ::libc::c_int,
    pub finished: bson_bool_t,
    pub stack: [::libc::c_int; 32usize],
    pub stackPos: ::libc::c_int,
    pub err: ::libc::c_int,
    pub errstr: *mut ::libc::c_char,
    pub flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed23 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed23 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type bson = Struct_Unnamed23;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed24 {
    pub _bindgen_data_: [u8; 12usize],
}
impl Union_Unnamed24 {
    pub unsafe fn bytes(&mut self) -> *mut [::libc::c_char; 12usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ints(&mut self) -> *mut [::libc::c_int; 3usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed24 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed24 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type bson_oid_t = Union_Unnamed24;
pub type bson_date_t = int64_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed25 {
    pub i: ::libc::c_int,
    pub t: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed25 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed25 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type bson_timestamp_t = Struct_Unnamed25;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed26 {
    pub fpath: *const ::libc::c_char,
    pub fplen: ::libc::c_int,
    pub input: *mut bson_iterator,
    pub stopos: ::libc::c_int,
    pub stopnestedarr: u8,
    pub mpos: ::libc::c_int,
    pub dpos: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed26 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed26 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FFPCTX = Struct_Unnamed26;
pub type Enum_Unnamed27 = ::libc::c_uint;
pub const BSON_TRAVERSE_ARRAYS_EXCLUDED: ::libc::c_uint = 1;
pub const BSON_TRAVERSE_OBJECTS_EXCLUDED: ::libc::c_uint = 2;
pub type bson_traverse_flags_t = Enum_Unnamed27;
pub type Enum_Unnamed28 = ::libc::c_uint;
pub const BSON_VCMD_OK: ::libc::c_uint = 0;
pub const BSON_VCMD_TERMINATE: ::libc::c_uint = 1;
pub const BSON_VCMD_SKIP_NESTED: ::libc::c_uint = 2;
pub const BSON_VCMD_SKIP_AFTER: ::libc::c_uint = 4;
pub type bson_visitor_cmd_t = Enum_Unnamed28;
pub type BSONVISITOR =
    ::std::option::Option<extern "C" fn(ipath: *const ::libc::c_char,
                                        ipathlen: ::libc::c_int,
                                        key: *const ::libc::c_char,
                                        keylen: ::libc::c_int,
                                        it: *const bson_iterator, after: u8,
                                        op: *mut ::libc::c_void)
                              -> bson_visitor_cmd_t>;
pub type bson_err_handler =
    ::std::option::Option<extern "C" fn(errmsg: *const ::libc::c_char) -> ()>;
pub type bson_printf_func =
    ::std::option::Option<extern "C" fn(arg1: *const ::libc::c_char, ...)
                              -> ::libc::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed29 {
    pub ifields: *mut TCMAP,
    pub imode: u8,
    pub bsbuf: *const ::libc::c_void,
    pub bsout: *mut bson,
    pub fkfields: *mut TCMAP,
    pub matched: ::libc::c_int,
    pub collector: *mut bson,
}
impl ::std::clone::Clone for Struct_Unnamed29 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed29 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type BSONSTRIPCTX = Struct_Unnamed29;
pub type Enum_Unnamed30 = ::libc::c_uint;
pub const BSON_MERGE_ARRAY_ADDSET: ::libc::c_uint = 0;
pub const BSON_MERGE_ARRAY_PULL: ::libc::c_uint = 1;
pub const BSON_MERGE_ARRAY_PUSH: ::libc::c_uint = 2;
pub type bson_merge_array_mode = Enum_Unnamed30;
pub enum Struct_EJDB { }
pub type EJDB = Struct_EJDB;
pub enum Struct_EJCOLL { }
pub type EJCOLL = Struct_EJCOLL;
pub enum Struct_EJQ { }
pub type EJQ = Struct_EJQ;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed31 {
    pub large: u8,
    pub compressed: u8,
    pub records: int64_t,
    pub cachedrecords: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed31 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed31 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type EJCOLLOPTS = Struct_Unnamed31;
pub type EJQRESULT = *mut TCLIST;
pub type Enum_Unnamed32 = ::libc::c_uint;
pub const JBEINVALIDCOLNAME: ::libc::c_uint = 9000;
pub const JBEINVALIDBSON: ::libc::c_uint = 9001;
pub const JBEINVALIDBSONPK: ::libc::c_uint = 9002;
pub const JBEQINVALIDQCONTROL: ::libc::c_uint = 9003;
pub const JBEQINOPNOTARRAY: ::libc::c_uint = 9004;
pub const JBEMETANVALID: ::libc::c_uint = 9005;
pub const JBEFPATHINVALID: ::libc::c_uint = 9006;
pub const JBEQINVALIDQRX: ::libc::c_uint = 9007;
pub const JBEQRSSORTING: ::libc::c_uint = 9008;
pub const JBEQERROR: ::libc::c_uint = 9009;
pub const JBEQUPDFAILED: ::libc::c_uint = 9010;
pub const JBEQONEEMATCH: ::libc::c_uint = 9011;
pub const JBEQINCEXCL: ::libc::c_uint = 9012;
pub const JBEQACTKEY: ::libc::c_uint = 9013;
pub const JBEMAXNUMCOLS: ::libc::c_uint = 9014;
pub const JBEEI: ::libc::c_uint = 9015;
pub const JBEEJSONPARSE: ::libc::c_uint = 9016;
pub const JBETOOBIGBSON: ::libc::c_uint = 9017;
pub const JBEINVALIDCMD: ::libc::c_uint = 9018;
pub type Enum_Unnamed33 = ::libc::c_uint;
pub const JBOREADER: ::libc::c_uint = 1;
pub const JBOWRITER: ::libc::c_uint = 2;
pub const JBOCREAT: ::libc::c_uint = 4;
pub const JBOTRUNC: ::libc::c_uint = 8;
pub const JBONOLCK: ::libc::c_uint = 16;
pub const JBOLCKNB: ::libc::c_uint = 32;
pub const JBOTSYNC: ::libc::c_uint = 64;
pub type Enum_Unnamed34 = ::libc::c_uint;
pub const JBIDXDROP: ::libc::c_uint = 1;
pub const JBIDXDROPALL: ::libc::c_uint = 2;
pub const JBIDXOP: ::libc::c_uint = 4;
pub const JBIDXREBLD: ::libc::c_uint = 8;
pub const JBIDXNUM: ::libc::c_uint = 16;
pub const JBIDXSTR: ::libc::c_uint = 32;
pub const JBIDXARR: ::libc::c_uint = 64;
pub const JBIDXISTR: ::libc::c_uint = 128;
pub type Enum_Unnamed35 = ::libc::c_uint;
pub const JBQRYCOUNT: ::libc::c_uint = 1;
pub const JBQRYFINDONE: ::libc::c_uint = 2;
pub type Enum_Unnamed36 = ::libc::c_uint;
pub const JBJSONEXPORT: ::libc::c_uint = 1;
pub const JBIMPORTUPDATE: ::libc::c_uint = 2;
pub const JBIMPORTREPLACE: ::libc::c_uint = 4;
extern "C" {
    pub static mut tcfatalfunc:
               ::std::option::Option<extern "C" fn(arg1:
                                                       *const ::libc::c_char)
                                         -> ()>;
}
extern "C" {
    pub fn tcmalloc(size: size_t) -> *mut ::libc::c_void;
    pub fn tccalloc(nmemb: size_t, size: size_t) -> *mut ::libc::c_void;
    pub fn tcrealloc(ptr: *mut ::libc::c_void, size: size_t)
     -> *mut ::libc::c_void;
    pub fn tcmemdup(ptr: *const ::libc::c_void, size: size_t)
     -> *mut ::libc::c_void;
    pub fn tcstrdup(str: *const ::libc::c_void) -> *mut ::libc::c_char;
    pub fn tcfree(ptr: *mut ::libc::c_void) -> ();
    pub fn tcxstrnew() -> *mut TCXSTR;
    pub fn tcxstrnew2(str: *const ::libc::c_char) -> *mut TCXSTR;
    pub fn tcxstrnew3(asiz: ::libc::c_int) -> *mut TCXSTR;
    pub fn tcxstrdup(xstr: *const TCXSTR) -> *mut TCXSTR;
    pub fn tcxstrdel(xstr: *mut TCXSTR) -> ();
    pub fn tcxstrcat(xstr: *mut TCXSTR, ptr: *const ::libc::c_void,
                     size: ::libc::c_int) -> ();
    pub fn tcxstrcat2(xstr: *mut TCXSTR, str: *const ::libc::c_char) -> ();
    pub fn tcxstrptr(xstr: *const TCXSTR) -> *const ::libc::c_void;
    pub fn tcxstrsize(xstr: *const TCXSTR) -> ::libc::c_int;
    pub fn tcxstrclear(xstr: *mut TCXSTR) -> ();
    pub fn tcxstrprintf(xstr: *mut TCXSTR, format: *const ::libc::c_char, ...)
     -> ();
    pub fn tcsprintf(format: *const ::libc::c_char, ...)
     -> *mut ::libc::c_char;
    pub fn tcxstrtomalloc(xstr: *mut TCXSTR) -> *mut ::libc::c_void;
    pub fn tcxstrfrommalloc(ptr: *mut ::libc::c_void, size: ::libc::c_int)
     -> *mut TCXSTR;
    pub fn tclistnew() -> *mut TCLIST;
    pub fn tclistnew2(anum: ::libc::c_int) -> *mut TCLIST;
    pub fn tclistnew3(str: *const ::libc::c_char, ...) -> *mut TCLIST;
    pub fn tclistdup(list: *const TCLIST) -> *mut TCLIST;
    pub fn tclistdel(list: *mut TCLIST) -> ();
    pub fn tclistnum(list: *const TCLIST) -> ::libc::c_int;
    pub fn tclistval(list: *const TCLIST, index: ::libc::c_int,
                     sp: *mut ::libc::c_int) -> *const ::libc::c_void;
    pub fn tclistval2(list: *const TCLIST, index: ::libc::c_int)
     -> *const ::libc::c_char;
    pub fn tclistpush(list: *mut TCLIST, ptr: *const ::libc::c_void,
                      size: ::libc::c_int) -> ();
    pub fn tclistpush2(list: *mut TCLIST, str: *const ::libc::c_char) -> ();
    pub fn tclistpop(list: *mut TCLIST, sp: *mut ::libc::c_int)
     -> *mut ::libc::c_void;
    pub fn tclistpop2(list: *mut TCLIST) -> *mut ::libc::c_char;
    pub fn tclistunshift(list: *mut TCLIST, ptr: *const ::libc::c_void,
                         size: ::libc::c_int) -> ();
    pub fn tclistunshift2(list: *mut TCLIST, str: *const ::libc::c_char)
     -> ();
    pub fn tclistshift(list: *mut TCLIST, sp: *mut ::libc::c_int)
     -> *mut ::libc::c_void;
    pub fn tclistshift2(list: *mut TCLIST) -> *mut ::libc::c_char;
    pub fn tclistinsert(list: *mut TCLIST, index: ::libc::c_int,
                        ptr: *const ::libc::c_void, size: ::libc::c_int)
     -> ();
    pub fn tclistinsert2(list: *mut TCLIST, index: ::libc::c_int,
                         str: *const ::libc::c_char) -> ();
    pub fn tclistremove(list: *mut TCLIST, index: ::libc::c_int,
                        sp: *mut ::libc::c_int) -> *mut ::libc::c_void;
    pub fn tclistremove2(list: *mut TCLIST, index: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn tclistover(list: *mut TCLIST, index: ::libc::c_int,
                      ptr: *const ::libc::c_void, size: ::libc::c_int) -> ();
    pub fn tclistover2(list: *mut TCLIST, index: ::libc::c_int,
                       str: *const ::libc::c_char) -> ();
    pub fn tclistsort(list: *mut TCLIST) -> ();
    pub fn tclistlsearch(list: *const TCLIST, ptr: *const ::libc::c_void,
                         size: ::libc::c_int) -> ::libc::c_int;
    pub fn tclistbsearch(list: *const TCLIST, ptr: *const ::libc::c_void,
                         size: ::libc::c_int) -> ::libc::c_int;
    pub fn tclistclear(list: *mut TCLIST) -> ();
    pub fn tclistdump(list: *const TCLIST, sp: *mut ::libc::c_int)
     -> *mut ::libc::c_void;
    pub fn tclistload(ptr: *const ::libc::c_void, size: ::libc::c_int)
     -> *mut TCLIST;
    pub fn tclistpushmalloc(list: *mut TCLIST, ptr: *mut ::libc::c_void,
                            size: ::libc::c_int) -> ();
    pub fn tclistsortci(list: *mut TCLIST) -> ();
    pub fn tclistsortex(list: *mut TCLIST,
                        cmp:
                            ::std::option::Option<extern "C" fn(arg1:
                                                                    *const TCLISTDATUM,
                                                                arg2:
                                                                    *const TCLISTDATUM)
                                                      -> ::libc::c_int>)
     -> ();
    pub fn tclistinvert(list: *mut TCLIST) -> ();
    pub fn tclistprintf(list: *mut TCLIST, format: *const ::libc::c_char, ...)
     -> ();
    pub fn tcmapnew() -> *mut TCMAP;
    pub fn tcmapnew2(bnum: uint32_t) -> *mut TCMAP;
    pub fn tcmapnew3(str: *const ::libc::c_char, ...) -> *mut TCMAP;
    pub fn tcmapdup(map: *const TCMAP) -> *mut TCMAP;
    pub fn tcmapdel(map: *mut TCMAP) -> ();
    pub fn tcmapput(map: *mut TCMAP, kbuf: *const ::libc::c_void,
                    ksiz: ::libc::c_int, vbuf: *const ::libc::c_void,
                    vsiz: ::libc::c_int) -> ();
    pub fn tcmapput2(map: *mut TCMAP, kstr: *const ::libc::c_char,
                     vstr: *const ::libc::c_char) -> ();
    pub fn tcmapputkeep(map: *mut TCMAP, kbuf: *const ::libc::c_void,
                        ksiz: ::libc::c_int, vbuf: *const ::libc::c_void,
                        vsiz: ::libc::c_int) -> u8;
    pub fn tcmapputkeep2(map: *mut TCMAP, kstr: *const ::libc::c_char,
                         vstr: *const ::libc::c_char) -> u8;
    pub fn tcmapputcat(map: *mut TCMAP, kbuf: *const ::libc::c_void,
                       ksiz: ::libc::c_int, vbuf: *const ::libc::c_void,
                       vsiz: ::libc::c_int) -> ();
    pub fn tcmapputcat2(map: *mut TCMAP, kstr: *const ::libc::c_char,
                        vstr: *const ::libc::c_char) -> ();
    pub fn tcmapout(map: *mut TCMAP, kbuf: *const ::libc::c_void,
                    ksiz: ::libc::c_int) -> u8;
    pub fn tcmapout2(map: *mut TCMAP, kstr: *const ::libc::c_char) -> u8;
    pub fn tcmapget(map: *const TCMAP, kbuf: *const ::libc::c_void,
                    ksiz: ::libc::c_int, sp: *mut ::libc::c_int)
     -> *const ::libc::c_void;
    pub fn tcmapget2(map: *const TCMAP, kstr: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn tcmapmove(map: *mut TCMAP, kbuf: *const ::libc::c_void,
                     ksiz: ::libc::c_int, head: u8) -> u8;
    pub fn tcmapmove2(map: *mut TCMAP, kstr: *const ::libc::c_char, head: u8)
     -> u8;
    pub fn tcmapiterinit(map: *mut TCMAP) -> ();
    pub fn tcmapiternext(map: *mut TCMAP, sp: *mut ::libc::c_int)
     -> *const ::libc::c_void;
    pub fn tcmapiternext2(map: *mut TCMAP) -> *const ::libc::c_char;
    pub fn tcmaprnum(map: *const TCMAP) -> uint64_t;
    pub fn tcmapmsiz(map: *const TCMAP) -> uint64_t;
    pub fn tcmapkeys(map: *const TCMAP) -> *mut TCLIST;
    pub fn tcmapvals(map: *const TCMAP) -> *mut TCLIST;
    pub fn tcmapaddint(map: *mut TCMAP, kbuf: *const ::libc::c_void,
                       ksiz: ::libc::c_int, num: ::libc::c_int)
     -> ::libc::c_int;
    pub fn tcmapadddouble(map: *mut TCMAP, kbuf: *const ::libc::c_void,
                          ksiz: ::libc::c_int, num: ::libc::c_double)
     -> ::libc::c_double;
    pub fn tcmapclear(map: *mut TCMAP) -> ();
    pub fn tcmapcutfront(map: *mut TCMAP, num: ::libc::c_int) -> ();
    pub fn tcmapdump(map: *const TCMAP, sp: *mut ::libc::c_int)
     -> *mut ::libc::c_void;
    pub fn tcmapload(ptr: *const ::libc::c_void, size: ::libc::c_int)
     -> *mut TCMAP;
    pub fn tcmapput3(map: *mut TCMAP, kbuf: *const ::libc::c_void,
                     ksiz: ::libc::c_int, vbuf: *const ::libc::c_char,
                     vsiz: ::libc::c_int) -> ();
    pub fn tcmapput4(map: *mut TCMAP, kbuf: *const ::libc::c_void,
                     ksiz: ::libc::c_int, fvbuf: *const ::libc::c_void,
                     fvsiz: ::libc::c_int, lvbuf: *const ::libc::c_void,
                     lvsiz: ::libc::c_int) -> ();
    pub fn tcmapputcat3(map: *mut TCMAP, kbuf: *const ::libc::c_void,
                        ksiz: ::libc::c_int, vbuf: *const ::libc::c_void,
                        vsiz: ::libc::c_int) -> ();
    pub fn tcmapputproc(map: *mut TCMAP, kbuf: *const ::libc::c_void,
                        ksiz: ::libc::c_int, vbuf: *const ::libc::c_void,
                        vsiz: ::libc::c_int, _proc: TCPDPROC,
                        op: *mut ::libc::c_void) -> u8;
    pub fn tcmapget3(map: *mut TCMAP, kbuf: *const ::libc::c_void,
                     ksiz: ::libc::c_int, sp: *mut ::libc::c_int)
     -> *const ::libc::c_void;
    pub fn tcmapget4(map: *mut TCMAP, kstr: *const ::libc::c_char,
                     dstr: *const ::libc::c_char) -> *const ::libc::c_char;
    pub fn tcmapiterinit2(map: *mut TCMAP, kbuf: *const ::libc::c_void,
                          ksiz: ::libc::c_int) -> ();
    pub fn tcmapiterinit3(map: *mut TCMAP, kstr: *const ::libc::c_char) -> ();
    pub fn tcmapiterval(kbuf: *const ::libc::c_void, sp: *mut ::libc::c_int)
     -> *const ::libc::c_void;
    pub fn tcmapiterval2(kstr: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn tcmapkeys2(map: *const TCMAP, np: *mut ::libc::c_int)
     -> *mut *const ::libc::c_char;
    pub fn tcmapvals2(map: *const TCMAP, np: *mut ::libc::c_int)
     -> *mut *const ::libc::c_char;
    pub fn tcmaploadone(ptr: *const ::libc::c_void, size: ::libc::c_int,
                        kbuf: *const ::libc::c_void, ksiz: ::libc::c_int,
                        sp: *mut ::libc::c_int) -> *mut ::libc::c_void;
    pub fn tcmaploadoneintoxstr(ptr: *const ::libc::c_void,
                                size: ::libc::c_int,
                                kbuf: *const ::libc::c_void,
                                ksiz: ::libc::c_int, xstr: *mut TCXSTR)
     -> ::libc::c_int;
    pub fn tcmapprintf(map: *mut TCMAP, kstr: *const ::libc::c_char,
                       format: *const ::libc::c_char, ...) -> ();
    pub fn tctreenew() -> *mut TCTREE;
    pub fn tctreenew2(cmp: TCCMP, cmpop: *mut ::libc::c_void) -> *mut TCTREE;
    pub fn tctreedup(tree: *const TCTREE) -> *mut TCTREE;
    pub fn tctreedel(tree: *mut TCTREE) -> ();
    pub fn tctreeput(tree: *mut TCTREE, kbuf: *const ::libc::c_void,
                     ksiz: ::libc::c_int, vbuf: *const ::libc::c_void,
                     vsiz: ::libc::c_int) -> ();
    pub fn tctreeput2(tree: *mut TCTREE, kstr: *const ::libc::c_char,
                      vstr: *const ::libc::c_char) -> ();
    pub fn tctreeputkeep(tree: *mut TCTREE, kbuf: *const ::libc::c_void,
                         ksiz: ::libc::c_int, vbuf: *const ::libc::c_void,
                         vsiz: ::libc::c_int) -> u8;
    pub fn tctreeputkeep2(tree: *mut TCTREE, kstr: *const ::libc::c_char,
                          vstr: *const ::libc::c_char) -> u8;
    pub fn tctreeputcat(tree: *mut TCTREE, kbuf: *const ::libc::c_void,
                        ksiz: ::libc::c_int, vbuf: *const ::libc::c_void,
                        vsiz: ::libc::c_int) -> ();
    pub fn tctreeputcat2(tree: *mut TCTREE, kstr: *const ::libc::c_char,
                         vstr: *const ::libc::c_char) -> ();
    pub fn tctreeputproc(tree: *mut TCTREE, kbuf: *const ::libc::c_void,
                         ksiz: ::libc::c_int, vbuf: *const ::libc::c_void,
                         vsiz: ::libc::c_int, _proc: TCPDPROC,
                         op: *mut ::libc::c_void) -> u8;
    pub fn tctreeout(tree: *mut TCTREE, kbuf: *const ::libc::c_void,
                     ksiz: ::libc::c_int) -> u8;
    pub fn tctreeout2(tree: *mut TCTREE, kstr: *const ::libc::c_char) -> u8;
    pub fn tctreeget(tree: *mut TCTREE, kbuf: *const ::libc::c_void,
                     ksiz: ::libc::c_int, sp: *mut ::libc::c_int)
     -> *const ::libc::c_void;
    pub fn tctreeget2(tree: *mut TCTREE, kstr: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn tctreeiterinit(tree: *mut TCTREE) -> ();
    pub fn tctreeiternext(tree: *mut TCTREE, sp: *mut ::libc::c_int)
     -> *const ::libc::c_void;
    pub fn tctreeiternext2(tree: *mut TCTREE) -> *const ::libc::c_char;
    pub fn tctreernum(tree: *const TCTREE) -> uint64_t;
    pub fn tctreemsiz(tree: *const TCTREE) -> uint64_t;
    pub fn tctreekeys(tree: *const TCTREE) -> *mut TCLIST;
    pub fn tctreevals(tree: *const TCTREE) -> *mut TCLIST;
    pub fn tctreeaddint(tree: *mut TCTREE, kbuf: *const ::libc::c_void,
                        ksiz: ::libc::c_int, num: ::libc::c_int)
     -> ::libc::c_int;
    pub fn tctreeadddouble(tree: *mut TCTREE, kbuf: *const ::libc::c_void,
                           ksiz: ::libc::c_int, num: ::libc::c_double)
     -> ::libc::c_double;
    pub fn tctreeclear(tree: *mut TCTREE) -> ();
    pub fn tctreecutfringe(tree: *mut TCTREE, num: ::libc::c_int) -> ();
    pub fn tctreedump(tree: *const TCTREE, sp: *mut ::libc::c_int)
     -> *mut ::libc::c_void;
    pub fn tctreeload(ptr: *const ::libc::c_void, size: ::libc::c_int,
                      cmp: TCCMP, cmpop: *mut ::libc::c_void) -> *mut TCTREE;
    pub fn tctreeput3(tree: *mut TCTREE, kbuf: *const ::libc::c_void,
                      ksiz: ::libc::c_int, vbuf: *const ::libc::c_void,
                      vsiz: ::libc::c_int) -> ();
    pub fn tctreeputkeep3(tree: *mut TCTREE, kbuf: *const ::libc::c_void,
                          ksiz: ::libc::c_int, vbuf: *const ::libc::c_void,
                          vsiz: ::libc::c_int) -> u8;
    pub fn tctreeputcat3(tree: *mut TCTREE, kbuf: *const ::libc::c_void,
                         ksiz: ::libc::c_int, vbuf: *const ::libc::c_void,
                         vsiz: ::libc::c_int) -> ();
    pub fn tctreeget3(tree: *const TCTREE, kbuf: *const ::libc::c_void,
                      ksiz: ::libc::c_int, sp: *mut ::libc::c_int)
     -> *const ::libc::c_void;
    pub fn tctreeget4(tree: *mut TCTREE, kstr: *const ::libc::c_char,
                      dstr: *const ::libc::c_char) -> *const ::libc::c_char;
    pub fn tctreeiterinit2(tree: *mut TCTREE, kbuf: *const ::libc::c_void,
                           ksiz: ::libc::c_int) -> ();
    pub fn tctreeiterinit3(tree: *mut TCTREE, kstr: *const ::libc::c_char)
     -> ();
    pub fn tctreeiterval(kbuf: *const ::libc::c_void, sp: *mut ::libc::c_int)
     -> *const ::libc::c_void;
    pub fn tctreeiterval2(kstr: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn tctreekeys2(tree: *const TCTREE, np: *mut ::libc::c_int)
     -> *mut *const ::libc::c_char;
    pub fn tctreevals2(tree: *const TCTREE, np: *mut ::libc::c_int)
     -> *mut *const ::libc::c_char;
    pub fn tctreeloadone(ptr: *const ::libc::c_void, size: ::libc::c_int,
                         kbuf: *const ::libc::c_void, ksiz: ::libc::c_int,
                         sp: *mut ::libc::c_int) -> *mut ::libc::c_void;
    pub fn tctreeprintf(tree: *mut TCTREE, kstr: *const ::libc::c_char,
                        format: *const ::libc::c_char, ...) -> ();
    pub fn tcmdbnew() -> *mut TCMDB;
    pub fn tcmdbnew2(bnum: uint32_t) -> *mut TCMDB;
    pub fn tcmdbdel(mdb: *mut TCMDB) -> ();
    pub fn tcmdbput(mdb: *mut TCMDB, kbuf: *const ::libc::c_void,
                    ksiz: ::libc::c_int, vbuf: *const ::libc::c_void,
                    vsiz: ::libc::c_int) -> ();
    pub fn tcmdbput2(mdb: *mut TCMDB, kstr: *const ::libc::c_char,
                     vstr: *const ::libc::c_char) -> ();
    pub fn tcmdbputkeep(mdb: *mut TCMDB, kbuf: *const ::libc::c_void,
                        ksiz: ::libc::c_int, vbuf: *const ::libc::c_void,
                        vsiz: ::libc::c_int) -> u8;
    pub fn tcmdbputkeep2(mdb: *mut TCMDB, kstr: *const ::libc::c_char,
                         vstr: *const ::libc::c_char) -> u8;
    pub fn tcmdbputcat(mdb: *mut TCMDB, kbuf: *const ::libc::c_void,
                       ksiz: ::libc::c_int, vbuf: *const ::libc::c_void,
                       vsiz: ::libc::c_int) -> ();
    pub fn tcmdbputcat2(mdb: *mut TCMDB, kstr: *const ::libc::c_char,
                        vstr: *const ::libc::c_char) -> ();
    pub fn tcmdbout(mdb: *mut TCMDB, kbuf: *const ::libc::c_void,
                    ksiz: ::libc::c_int) -> u8;
    pub fn tcmdbout2(mdb: *mut TCMDB, kstr: *const ::libc::c_char) -> u8;
    pub fn tcmdbget(mdb: *mut TCMDB, kbuf: *const ::libc::c_void,
                    ksiz: ::libc::c_int, sp: *mut ::libc::c_int)
     -> *mut ::libc::c_void;
    pub fn tcmdbget2(mdb: *mut TCMDB, kstr: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn tcmdbvsiz(mdb: *mut TCMDB, kbuf: *const ::libc::c_void,
                     ksiz: ::libc::c_int) -> ::libc::c_int;
    pub fn tcmdbvsiz2(mdb: *mut TCMDB, kstr: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn tcmdbiterinit(mdb: *mut TCMDB) -> ();
    pub fn tcmdbiternext(mdb: *mut TCMDB, sp: *mut ::libc::c_int)
     -> *mut ::libc::c_void;
    pub fn tcmdbiternext2(mdb: *mut TCMDB) -> *mut ::libc::c_char;
    pub fn tcmdbfwmkeys(mdb: *mut TCMDB, pbuf: *const ::libc::c_void,
                        psiz: ::libc::c_int, max: ::libc::c_int)
     -> *mut TCLIST;
    pub fn tcmdbfwmkeys2(mdb: *mut TCMDB, pstr: *const ::libc::c_char,
                         max: ::libc::c_int) -> *mut TCLIST;
    pub fn tcmdbrnum(mdb: *mut TCMDB) -> uint64_t;
    pub fn tcmdbmsiz(mdb: *mut TCMDB) -> uint64_t;
    pub fn tcmdbaddint(mdb: *mut TCMDB, kbuf: *const ::libc::c_void,
                       ksiz: ::libc::c_int, num: ::libc::c_int)
     -> ::libc::c_int;
    pub fn tcmdbadddouble(mdb: *mut TCMDB, kbuf: *const ::libc::c_void,
                          ksiz: ::libc::c_int, num: ::libc::c_double)
     -> ::libc::c_double;
    pub fn tcmdbvanish(mdb: *mut TCMDB) -> ();
    pub fn tcmdbcutfront(mdb: *mut TCMDB, num: ::libc::c_int) -> ();
    pub fn tcmdbput3(mdb: *mut TCMDB, kbuf: *const ::libc::c_void,
                     ksiz: ::libc::c_int, vbuf: *const ::libc::c_char,
                     vsiz: ::libc::c_int) -> ();
    pub fn tcmdbput4(mdb: *mut TCMDB, kbuf: *const ::libc::c_void,
                     ksiz: ::libc::c_int, fvbuf: *const ::libc::c_void,
                     fvsiz: ::libc::c_int, lvbuf: *const ::libc::c_void,
                     lvsiz: ::libc::c_int) -> ();
    pub fn tcmdbputcat3(mdb: *mut TCMDB, kbuf: *const ::libc::c_void,
                        ksiz: ::libc::c_int, vbuf: *const ::libc::c_void,
                        vsiz: ::libc::c_int) -> ();
    pub fn tcmdbputproc(mdb: *mut TCMDB, kbuf: *const ::libc::c_void,
                        ksiz: ::libc::c_int, vbuf: *const ::libc::c_void,
                        vsiz: ::libc::c_int, _proc: TCPDPROC,
                        op: *mut ::libc::c_void) -> u8;
    pub fn tcmdbget3(mdb: *mut TCMDB, kbuf: *const ::libc::c_void,
                     ksiz: ::libc::c_int, sp: *mut ::libc::c_int)
     -> *mut ::libc::c_void;
    pub fn tcmdbiterinit2(mdb: *mut TCMDB, kbuf: *const ::libc::c_void,
                          ksiz: ::libc::c_int) -> ();
    pub fn tcmdbiterinit3(mdb: *mut TCMDB, kstr: *const ::libc::c_char) -> ();
    pub fn tcmdbforeach(mdb: *mut TCMDB, iter: TCITER,
                        op: *mut ::libc::c_void) -> ();
    pub fn tcndbnew() -> *mut TCNDB;
    pub fn tcndbnew2(cmp: TCCMP, cmpop: *mut ::libc::c_void) -> *mut TCNDB;
    pub fn tcndbdel(ndb: *mut TCNDB) -> ();
    pub fn tcndbput(ndb: *mut TCNDB, kbuf: *const ::libc::c_void,
                    ksiz: ::libc::c_int, vbuf: *const ::libc::c_void,
                    vsiz: ::libc::c_int) -> ();
    pub fn tcndbput2(ndb: *mut TCNDB, kstr: *const ::libc::c_char,
                     vstr: *const ::libc::c_char) -> ();
    pub fn tcndbputkeep(ndb: *mut TCNDB, kbuf: *const ::libc::c_void,
                        ksiz: ::libc::c_int, vbuf: *const ::libc::c_void,
                        vsiz: ::libc::c_int) -> u8;
    pub fn tcndbputkeep2(ndb: *mut TCNDB, kstr: *const ::libc::c_char,
                         vstr: *const ::libc::c_char) -> u8;
    pub fn tcndbputcat(ndb: *mut TCNDB, kbuf: *const ::libc::c_void,
                       ksiz: ::libc::c_int, vbuf: *const ::libc::c_void,
                       vsiz: ::libc::c_int) -> ();
    pub fn tcndbputcat2(ndb: *mut TCNDB, kstr: *const ::libc::c_char,
                        vstr: *const ::libc::c_char) -> ();
    pub fn tcndbout(ndb: *mut TCNDB, kbuf: *const ::libc::c_void,
                    ksiz: ::libc::c_int) -> u8;
    pub fn tcndbout2(ndb: *mut TCNDB, kstr: *const ::libc::c_char) -> u8;
    pub fn tcndbget(ndb: *mut TCNDB, kbuf: *const ::libc::c_void,
                    ksiz: ::libc::c_int, sp: *mut ::libc::c_int)
     -> *mut ::libc::c_void;
    pub fn tcndbget2(ndb: *mut TCNDB, kstr: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn tcndbvsiz(ndb: *mut TCNDB, kbuf: *const ::libc::c_void,
                     ksiz: ::libc::c_int) -> ::libc::c_int;
    pub fn tcndbvsiz2(ndb: *mut TCNDB, kstr: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn tcndbiterinit(ndb: *mut TCNDB) -> ();
    pub fn tcndbiternext(ndb: *mut TCNDB, sp: *mut ::libc::c_int)
     -> *mut ::libc::c_void;
    pub fn tcndbiternext2(ndb: *mut TCNDB) -> *mut ::libc::c_char;
    pub fn tcndbfwmkeys(ndb: *mut TCNDB, pbuf: *const ::libc::c_void,
                        psiz: ::libc::c_int, max: ::libc::c_int)
     -> *mut TCLIST;
    pub fn tcndbfwmkeys2(ndb: *mut TCNDB, pstr: *const ::libc::c_char,
                         max: ::libc::c_int) -> *mut TCLIST;
    pub fn tcndbrnum(ndb: *mut TCNDB) -> uint64_t;
    pub fn tcndbmsiz(ndb: *mut TCNDB) -> uint64_t;
    pub fn tcndbaddint(ndb: *mut TCNDB, kbuf: *const ::libc::c_void,
                       ksiz: ::libc::c_int, num: ::libc::c_int)
     -> ::libc::c_int;
    pub fn tcndbadddouble(ndb: *mut TCNDB, kbuf: *const ::libc::c_void,
                          ksiz: ::libc::c_int, num: ::libc::c_double)
     -> ::libc::c_double;
    pub fn tcndbvanish(ndb: *mut TCNDB) -> ();
    pub fn tcndbcutfringe(ndb: *mut TCNDB, num: ::libc::c_int) -> ();
    pub fn tcndbput3(ndb: *mut TCNDB, kbuf: *const ::libc::c_void,
                     ksiz: ::libc::c_int, vbuf: *const ::libc::c_void,
                     vsiz: ::libc::c_int) -> ();
    pub fn tcndbputkeep3(ndb: *mut TCNDB, kbuf: *const ::libc::c_void,
                         ksiz: ::libc::c_int, vbuf: *const ::libc::c_void,
                         vsiz: ::libc::c_int) -> u8;
    pub fn tcndbputcat3(ndb: *mut TCNDB, kbuf: *const ::libc::c_void,
                        ksiz: ::libc::c_int, vbuf: *const ::libc::c_void,
                        vsiz: ::libc::c_int) -> ();
    pub fn tcndbputproc(ndb: *mut TCNDB, kbuf: *const ::libc::c_void,
                        ksiz: ::libc::c_int, vbuf: *const ::libc::c_void,
                        vsiz: ::libc::c_int, _proc: TCPDPROC,
                        op: *mut ::libc::c_void) -> u8;
    pub fn tcndbget3(ndb: *mut TCNDB, kbuf: *const ::libc::c_void,
                     ksiz: ::libc::c_int, sp: *mut ::libc::c_int)
     -> *mut ::libc::c_void;
    pub fn tcndbiterinit2(ndb: *mut TCNDB, kbuf: *const ::libc::c_void,
                          ksiz: ::libc::c_int) -> ();
    pub fn tcndbiterinit3(ndb: *mut TCNDB, kstr: *const ::libc::c_char) -> ();
    pub fn tcndbforeach(ndb: *mut TCNDB, iter: TCITER,
                        op: *mut ::libc::c_void) -> ();
    pub fn tcmpoolnew() -> *mut TCMPOOL;
    pub fn tcmpooldel(mpool: *mut TCMPOOL) -> ();
    pub fn tcmpoolpush(mpool: *mut TCMPOOL, ptr: *mut ::libc::c_void,
                       del:
                           ::std::option::Option<extern "C" fn(arg1:
                                                                   *mut ::libc::c_void)
                                                     -> ()>)
     -> *mut ::libc::c_void;
    pub fn tcmpoolpushptr(mpool: *mut TCMPOOL, ptr: *mut ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn tcmpoolpushxstr(mpool: *mut TCMPOOL, xstr: *mut TCXSTR)
     -> *mut TCXSTR;
    pub fn tcmpoolpushlist(mpool: *mut TCMPOOL, list: *mut TCLIST)
     -> *mut TCLIST;
    pub fn tcmpoolpushmap(mpool: *mut TCMPOOL, map: *mut TCMAP) -> *mut TCMAP;
    pub fn tcmpoolpushtree(mpool: *mut TCMPOOL, tree: *mut TCTREE)
     -> *mut TCTREE;
    pub fn tcmpoolmalloc(mpool: *mut TCMPOOL, size: size_t)
     -> *mut ::libc::c_void;
    pub fn tcmpoolxstrnew(mpool: *mut TCMPOOL) -> *mut TCXSTR;
    pub fn tcmpoollistnew(mpool: *mut TCMPOOL) -> *mut TCLIST;
    pub fn tcmpoolmapnew(mpool: *mut TCMPOOL) -> *mut TCMAP;
    pub fn tcmpooltreenew(mpool: *mut TCMPOOL) -> *mut TCTREE;
    pub fn tcmpoolpop(mpool: *mut TCMPOOL, exe: u8) -> ();
    pub fn tcmpoolclear(mpool: *mut TCMPOOL, exe: u8) -> ();
    pub fn tcmpoolglobal() -> *mut TCMPOOL;
    pub fn tclmax(a: ::libc::c_long, b: ::libc::c_long) -> ::libc::c_long;
    pub fn tclmin(a: ::libc::c_long, b: ::libc::c_long) -> ::libc::c_long;
    pub fn tclrand() -> ::libc::c_ulong;
    pub fn tcdrand() -> ::libc::c_double;
    pub fn tcdrandnd(avg: ::libc::c_double, sd: ::libc::c_double)
     -> ::libc::c_double;
    pub fn tcstricmp(astr: *const ::libc::c_char, bstr: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn tcstrfwm(str: *const ::libc::c_char, key: *const ::libc::c_char)
     -> u8;
    pub fn tcstrifwm(str: *const ::libc::c_char, key: *const ::libc::c_char)
     -> u8;
    pub fn tcstrbwm(str: *const ::libc::c_char, key: *const ::libc::c_char)
     -> u8;
    pub fn tcstribwm(str: *const ::libc::c_char, key: *const ::libc::c_char)
     -> u8;
    pub fn tcstrdist(astr: *const ::libc::c_char, bstr: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn tcstrdistutf(astr: *const ::libc::c_char,
                        bstr: *const ::libc::c_char) -> ::libc::c_int;
    pub fn tcstrtoupper(str: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tcstrtolower(str: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tcstrtrim(str: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tcstrsqzspc(str: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tcisvalidutf8str(str: *const ::libc::c_char, len: ::libc::c_int)
     -> u8;
    pub fn tcstrsubchr(str: *mut ::libc::c_char, rstr: *const ::libc::c_char,
                       sstr: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tcstrcntutf(str: *const ::libc::c_char) -> ::libc::c_int;
    pub fn tcstrcututf(str: *mut ::libc::c_char, num: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn tcstrutftoucs(str: *const ::libc::c_char, ary: *mut uint16_t,
                         np: *mut ::libc::c_int) -> ();
    pub fn tcstrucstoutf(ary: *const uint16_t, num: ::libc::c_int,
                         str: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn tcstrsplit(str: *const ::libc::c_char,
                      delims: *const ::libc::c_char) -> *mut TCLIST;
    pub fn tcstrjoin(list: *const TCLIST, delim: ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn tcatoi(str: *const ::libc::c_char) -> int64_t;
    pub fn tcatoix(str: *const ::libc::c_char) -> int64_t;
    pub fn tcatof(str: *const ::libc::c_char) -> ::libc::c_double;
    pub fn tcatof2(str: *const ::libc::c_char) -> ::libc::c_double;
    pub fn tcftoa(f: ::libc::c_double, buf: *mut ::libc::c_char,
                  max: ::libc::c_int, precision: ::libc::c_int)
     -> ::libc::c_int;
    pub fn tcregexmatch(str: *const ::libc::c_char,
                        regex: *const ::libc::c_char) -> u8;
    pub fn tcregexreplace(str: *const ::libc::c_char,
                          regex: *const ::libc::c_char,
                          alt: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tcmd5hash(ptr: *const ::libc::c_void, size: ::libc::c_int,
                     buf: *mut ::libc::c_char) -> ();
    pub fn tcarccipher(ptr: *const ::libc::c_void, size: ::libc::c_int,
                       kbuf: *const ::libc::c_void, ksiz: ::libc::c_int,
                       obuf: *mut ::libc::c_void) -> ();
    pub fn tctime() -> ::libc::c_double;
    pub fn tcmstime() -> ::libc::c_ulong;
    pub fn tccalendar(t: int64_t, jl: ::libc::c_int,
                      yearp: *mut ::libc::c_int, monp: *mut ::libc::c_int,
                      dayp: *mut ::libc::c_int, hourp: *mut ::libc::c_int,
                      minp: *mut ::libc::c_int, secp: *mut ::libc::c_int)
     -> ();
    pub fn tcdatestrwww(t: int64_t, jl: ::libc::c_int,
                        buf: *mut ::libc::c_char) -> ();
    pub fn tcdatestrhttp(t: int64_t, jl: ::libc::c_int,
                         buf: *mut ::libc::c_char) -> ();
    pub fn tcstrmktime(str: *const ::libc::c_char) -> int64_t;
    pub fn tcjetlag() -> ::libc::c_int;
    pub fn tcdayofweek(year: ::libc::c_int, mon: ::libc::c_int,
                       day: ::libc::c_int) -> ::libc::c_int;
    pub fn tcstrisnum(str: *const ::libc::c_char) -> u8;
    pub fn tcstrisintnum(str: *const ::libc::c_char, len: ::libc::c_int)
     -> u8;
    pub fn tcatoih(str: *const ::libc::c_char) -> int64_t;
    pub fn tcstrskipspc(str: *const ::libc::c_char) -> *const ::libc::c_char;
    pub fn tcstrutfnorm(str: *mut ::libc::c_char, opts: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn tcstrucsnorm(ary: *mut uint16_t, num: ::libc::c_int,
                        opts: ::libc::c_int) -> ::libc::c_int;
    pub fn tcstrkwic(str: *const ::libc::c_char, words: *const TCLIST,
                     width: ::libc::c_int, opts: ::libc::c_int)
     -> *mut TCLIST;
    pub fn tcstrtokenize(str: *const ::libc::c_char) -> *mut TCLIST;
    pub fn tcstrsplit2(ptr: *const ::libc::c_void, size: ::libc::c_int)
     -> *mut TCLIST;
    pub fn tcstrsplit3(str: *const ::libc::c_char,
                       delims: *const ::libc::c_char) -> *mut TCMAP;
    pub fn tcstrsplit4(ptr: *const ::libc::c_void, size: ::libc::c_int)
     -> *mut TCMAP;
    pub fn tcstrjoin2(list: *const TCLIST, sp: *mut ::libc::c_int)
     -> *mut ::libc::c_void;
    pub fn tcstrjoin3(map: *const TCMAP, delim: ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn tcstrjoin4(map: *const TCMAP, sp: *mut ::libc::c_int)
     -> *mut ::libc::c_void;
    pub fn tctopsort(base: *mut ::libc::c_void, nmemb: size_t, size: size_t,
                     top: size_t,
                     compar:
                         ::std::option::Option<extern "C" fn(arg1:
                                                                 *const ::libc::c_void,
                                                             arg2:
                                                                 *const ::libc::c_void)
                                                   -> ::libc::c_int>) -> ();
    pub fn tcsleep(sec: ::libc::c_double) -> u8;
    pub fn tcsysinfo() -> *mut TCMAP;
    pub fn tcchidxnew(range: ::libc::c_int) -> *mut TCCHIDX;
    pub fn tcchidxdel(chidx: *mut TCCHIDX) -> ();
    pub fn tcchidxhash(chidx: *mut TCCHIDX, ptr: *const ::libc::c_void,
                       size: ::libc::c_int) -> ::libc::c_int;
    pub fn tcrealpath(path: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tcstatfile(path: *const ::libc::c_char, isdirp: *mut u8,
                      sizep: *mut int64_t, mtimep: *mut int64_t) -> u8;
    pub fn tcreadfile(path: *const ::libc::c_char, limit: ::libc::c_int,
                      sp: *mut ::libc::c_int) -> *mut ::libc::c_void;
    pub fn tcunlinkfile(path: *const ::libc::c_char) -> u8;
    pub fn tcrenamefile(from: *const ::libc::c_char,
                        to: *const ::libc::c_char) -> u8;
    pub fn tcreadfilelines(path: *const ::libc::c_char) -> *mut TCLIST;
    pub fn tcwritefile(path: *const ::libc::c_char,
                       ptr: *const ::libc::c_void, size: ::libc::c_int) -> u8;
    pub fn tccopyfile(src: *const ::libc::c_char, dest: *const ::libc::c_char)
     -> u8;
    pub fn tcreaddir(path: *const ::libc::c_char) -> *mut TCLIST;
    pub fn tcglobpat(pattern: *const ::libc::c_char) -> *mut TCLIST;
    pub fn tcremovelink(path: *const ::libc::c_char) -> u8;
    pub fn tcfseek(fd: HANDLE, off: off_t, whence: ::libc::c_int) -> u8;
    pub fn tcftruncate(fd: HANDLE, length: off_t) -> u8;
    pub fn tcwrite(fd: HANDLE, buf: *const ::libc::c_void, size: size_t)
     -> u8;
    pub fn tcread(fd: HANDLE, buf: *mut ::libc::c_void, size: size_t) -> u8;
    pub fn tclock(fd: HANDLE, ex: u8, nb: u8) -> u8;
    pub fn tcunlock(fd: HANDLE) -> u8;
    pub fn tcsystem(args: *mut *const ::libc::c_char, anum: ::libc::c_int)
     -> ::libc::c_int;
    pub fn tcurlencode(ptr: *const ::libc::c_char, size: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn tcurldecode(str: *const ::libc::c_char, sp: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn tcurlbreak(str: *const ::libc::c_char) -> *mut TCMAP;
    pub fn tcurlresolve(base: *const ::libc::c_char,
                        target: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tcbaseencode(ptr: *const ::libc::c_char, size: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn tcbasedecode(str: *const ::libc::c_char, sp: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn tcquoteencode(ptr: *const ::libc::c_char, size: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn tcquotedecode(str: *const ::libc::c_char, sp: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn tcmimeencode(str: *const ::libc::c_char,
                        encname: *const ::libc::c_char, base: u8)
     -> *mut ::libc::c_char;
    pub fn tcmimedecode(str: *const ::libc::c_char, enp: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn tcmimebreak(ptr: *const ::libc::c_char, size: ::libc::c_int,
                       headers: *mut TCMAP, sp: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn tcmimeparts(ptr: *const ::libc::c_char, size: ::libc::c_int,
                       boundary: *const ::libc::c_char) -> *mut TCLIST;
    pub fn tchexencode(ptr: *const ::libc::c_char, size: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn tchexdecode(str: *const ::libc::c_char, sp: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn tcpackencode(ptr: *const ::libc::c_char, size: ::libc::c_int,
                        sp: *mut ::libc::c_int) -> *mut ::libc::c_char;
    pub fn tcpackdecode(ptr: *const ::libc::c_char, size: ::libc::c_int,
                        sp: *mut ::libc::c_int) -> *mut ::libc::c_char;
    pub fn tcbsencode(ptr: *const ::libc::c_char, size: ::libc::c_int,
                      sp: *mut ::libc::c_int) -> *mut ::libc::c_char;
    pub fn tcbsdecode(ptr: *const ::libc::c_char, size: ::libc::c_int,
                      sp: *mut ::libc::c_int) -> *mut ::libc::c_char;
    pub fn tcdeflate(ptr: *const ::libc::c_char, size: ::libc::c_int,
                     sp: *mut ::libc::c_int) -> *mut ::libc::c_char;
    pub fn tcinflate(ptr: *const ::libc::c_char, size: ::libc::c_int,
                     sp: *mut ::libc::c_int) -> *mut ::libc::c_char;
    pub fn tcgzipencode(ptr: *const ::libc::c_char, size: ::libc::c_int,
                        sp: *mut ::libc::c_int) -> *mut ::libc::c_char;
    pub fn tcgzipdecode(ptr: *const ::libc::c_char, size: ::libc::c_int,
                        sp: *mut ::libc::c_int) -> *mut ::libc::c_char;
    pub fn tcgetcrc(ptr: *const ::libc::c_char, size: ::libc::c_int)
     -> ::libc::c_uint;
    pub fn tcbzipencode(ptr: *const ::libc::c_char, size: ::libc::c_int,
                        sp: *mut ::libc::c_int) -> *mut ::libc::c_char;
    pub fn tcbzipdecode(ptr: *const ::libc::c_char, size: ::libc::c_int,
                        sp: *mut ::libc::c_int) -> *mut ::libc::c_char;
    pub fn tcberencode(ary: *const ::libc::c_uint, anum: ::libc::c_int,
                       sp: *mut ::libc::c_int) -> *mut ::libc::c_char;
    pub fn tcberdecode(ptr: *const ::libc::c_char, size: ::libc::c_int,
                       np: *mut ::libc::c_int) -> *mut ::libc::c_uint;
    pub fn tcxmlescape(str: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tcxmlunescape(str: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tcwwwformencode(params: *const TCMAP) -> *mut ::libc::c_char;
    pub fn tcwwwformdecode(str: *const ::libc::c_char, params: *mut TCMAP)
     -> ();
    pub fn tcwwwformdecode2(ptr: *const ::libc::c_void, size: ::libc::c_int,
                            _type: *const ::libc::c_char, params: *mut TCMAP)
     -> ();
    pub fn tcxmlbreak(str: *const ::libc::c_char) -> *mut TCLIST;
    pub fn tcxmlattrs(str: *const ::libc::c_char) -> *mut TCMAP;
    pub fn tccstrescape(str: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tccstrunescape(str: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tcjsonescape(str: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tcjsonunescape(str: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tctmplnew() -> *mut TCTMPL;
    pub fn tctmpldel(tmpl: *mut TCTMPL) -> ();
    pub fn tctmplsetsep(tmpl: *mut TCTMPL, begsep: *const ::libc::c_char,
                        endsep: *const ::libc::c_char) -> ();
    pub fn tctmplload(tmpl: *mut TCTMPL, str: *const ::libc::c_char) -> ();
    pub fn tctmplload2(tmpl: *mut TCTMPL, path: *const ::libc::c_char) -> u8;
    pub fn tctmpldump(tmpl: *mut TCTMPL, vars: *const TCMAP)
     -> *mut ::libc::c_char;
    pub fn tctmplconf(tmpl: *mut TCTMPL, name: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn tclistpushlist(list: *mut TCLIST, obj: *const TCLIST) -> ();
    pub fn tclistpushmap(list: *mut TCLIST, obj: *const TCMAP) -> ();
    pub fn tcmapputlist(map: *mut TCMAP, kstr: *const ::libc::c_char,
                        obj: *const TCLIST) -> ();
    pub fn tcmapputmap(map: *mut TCMAP, kstr: *const ::libc::c_char,
                       obj: *const TCMAP) -> ();
    pub fn tcptrlistnew() -> *mut TCPTRLIST;
    pub fn tcptrlistnew2(anum: ::libc::c_int) -> *mut TCPTRLIST;
    pub fn tcptrlistdup(ptrlist: *const TCPTRLIST) -> *mut TCPTRLIST;
    pub fn tcptrlistdel(ptrlist: *mut TCPTRLIST) -> ();
    pub fn tcptrlistnum(ptrlist: *const TCPTRLIST) -> ::libc::c_int;
    pub fn tcptrlistval(ptrlist: *const TCPTRLIST, index: ::libc::c_int)
     -> *mut ::libc::c_void;
    pub fn tcptrlistpush(ptrlist: *mut TCPTRLIST, ptr: *mut ::libc::c_void)
     -> ();
    pub fn tcptrlistpop(ptrlist: *mut TCPTRLIST) -> *mut ::libc::c_void;
    pub fn tcptrlistunshift(ptrlist: *mut TCPTRLIST, ptr: *mut ::libc::c_void)
     -> ();
    pub fn tcptrlistshift(ptrlist: *mut TCPTRLIST) -> *mut ::libc::c_void;
    pub fn tcptrlistinsert(ptrlist: *mut TCPTRLIST, index: ::libc::c_int,
                           ptr: *mut ::libc::c_void) -> ();
    pub fn tcptrlistremove(ptrlist: *mut TCPTRLIST, index: ::libc::c_int)
     -> *mut ::libc::c_void;
    pub fn tcptrlistover(ptrlist: *mut TCPTRLIST, index: ::libc::c_int,
                         ptr: *mut ::libc::c_void) -> ();
    pub fn tcptrlistclear(ptrlist: *mut TCPTRLIST) -> ();
    pub fn tcfilerrno2tcerr(tcerrdef: ::libc::c_int) -> ::libc::c_int;
    pub fn tcerrmsg(ecode: ::libc::c_int) -> *const ::libc::c_char;
    pub fn tcmyfatal(message: *const ::libc::c_char) -> *mut ::libc::c_void;
    pub fn tczeromap(size: uint64_t) -> *mut ::libc::c_void;
    pub fn tczerounmap(ptr: *mut ::libc::c_void) -> ();
    pub fn tcglobalmutexlock() -> u8;
    pub fn tcglobalmutexlockshared() -> u8;
    pub fn tcglobalmutexunlock() -> u8;
    pub fn tcpathlock(path: *const ::libc::c_char) -> u8;
    pub fn tcpathunlock(path: *const ::libc::c_char) -> u8;
    pub fn tcnumtostrbin(num: uint64_t, buf: *mut ::libc::c_char,
                         col: ::libc::c_int, fc: ::libc::c_int)
     -> ::libc::c_int;
    pub fn tccmplexical(aptr: *const ::libc::c_char, asiz: ::libc::c_int,
                        bptr: *const ::libc::c_char, bsiz: ::libc::c_int,
                        op: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn tccmpdecimal(aptr: *const ::libc::c_char, asiz: ::libc::c_int,
                        bptr: *const ::libc::c_char, bsiz: ::libc::c_int,
                        op: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn tccmpint32(aptr: *const ::libc::c_char, asiz: ::libc::c_int,
                      bptr: *const ::libc::c_char, bsiz: ::libc::c_int,
                      op: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn tccmpint64(aptr: *const ::libc::c_char, asiz: ::libc::c_int,
                      bptr: *const ::libc::c_char, bsiz: ::libc::c_int,
                      op: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn tcbwtencode(ptr: *const ::libc::c_char, size: ::libc::c_int,
                       idxp: *mut ::libc::c_int) -> *mut ::libc::c_char;
    pub fn tcbwtdecode(ptr: *const ::libc::c_char, size: ::libc::c_int,
                       idx: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn tclog2l(num: ::libc::c_long) -> ::libc::c_long;
    pub fn tclog2d(num: ::libc::c_double) -> ::libc::c_double;
    pub fn tcpagealign(off: uint64_t) -> uint64_t;
    pub fn tcpagsize() -> off_t;
    pub fn tcicaseformat(str: *const ::libc::c_char, strl: ::libc::c_int,
                         placeholder: *mut ::libc::c_void,
                         placeholdersz: ::libc::c_int,
                         dstptr: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn tcutf8map(str: *const uint8_t, strl: ::libc::c_int,
                     placeholder: *mut ::libc::c_void,
                     placeholdersz: ::libc::c_int, dstptr: *mut *mut uint8_t,
                     options: ::libc::c_int) -> ::libc::c_int;
    pub fn hashmurmur64(buf: *const ::libc::c_void, size: size_t,
                        seed: uint32_t) -> uint64_t;
    pub fn hashmurmur32(buf: *const ::libc::c_void, size: size_t,
                        seed: uint32_t) -> uint32_t;
    pub fn bson_first_errormsg(bson: *mut bson) -> *const ::libc::c_char;
    pub fn bson_create() -> *mut bson;
    pub fn bson_dispose(b: *mut bson) -> ();
    pub fn bson_size(b: *const bson) -> ::libc::c_int;
    pub fn bson_size2(bsdata: *const ::libc::c_void) -> ::libc::c_int;
    pub fn bson_buffer_size(b: *const bson) -> ::libc::c_int;
    pub fn bson_data(b: *const bson) -> *const ::libc::c_char;
    pub fn bson_data2(b: *const bson, bsize: *mut ::libc::c_int)
     -> *const ::libc::c_char;
    pub fn bson_print_raw(bson: *const ::libc::c_char, depth: ::libc::c_int)
     -> ();
    pub fn bson_find(it: *mut bson_iterator, obj: *const bson,
                     name: *const ::libc::c_char) -> bson_type;
    pub fn bson_find_from_buffer(it: *mut bson_iterator,
                                 buffer: *const ::libc::c_char,
                                 name: *const ::libc::c_char) -> bson_type;
    pub fn bson_find_fieldpath_value(fieldpath: *const ::libc::c_char,
                                     it: *mut bson_iterator) -> bson_type;
    pub fn bson_find_fieldpath_value2(fpath: *const ::libc::c_char,
                                      fplen: ::libc::c_int,
                                      it: *mut bson_iterator) -> bson_type;
    pub fn bson_find_fieldpath_value3(ffctx: *mut FFPCTX) -> bson_type;
    pub fn bson_visit_fields(it: *mut bson_iterator,
                             flags: bson_traverse_flags_t,
                             visitor: BSONVISITOR, op: *mut ::libc::c_void)
     -> ();
    pub fn bson_iterator_create() -> *mut bson_iterator;
    pub fn bson_iterator_dispose(arg1: *mut bson_iterator) -> ();
    pub fn bson_iterator_init(i: *mut bson_iterator, b: *const bson) -> ();
    pub fn bson_iterator_from_buffer(i: *mut bson_iterator,
                                     buffer: *const ::libc::c_char) -> ();
    pub fn bson_iterator_more(i: *const bson_iterator) -> bson_bool_t;
    pub fn bson_iterator_next(i: *mut bson_iterator) -> bson_type;
    pub fn bson_iterator_type(i: *const bson_iterator) -> bson_type;
    pub fn bson_iterator_key(i: *const bson_iterator)
     -> *const ::libc::c_char;
    pub fn bson_iterator_value(i: *const bson_iterator)
     -> *const ::libc::c_char;
    pub fn bson_iterator_double(i: *const bson_iterator) -> ::libc::c_double;
    pub fn bson_iterator_int(i: *const bson_iterator) -> ::libc::c_int;
    pub fn bson_iterator_long(i: *const bson_iterator) -> int64_t;
    pub fn bson_iterator_timestamp(i: *const bson_iterator)
     -> bson_timestamp_t;
    pub fn bson_iterator_timestamp_time(i: *const bson_iterator)
     -> ::libc::c_int;
    pub fn bson_iterator_timestamp_increment(i: *const bson_iterator)
     -> ::libc::c_int;
    pub fn bson_iterator_bool(i: *const bson_iterator) -> bson_bool_t;
    pub fn bson_iterator_double_raw(i: *const bson_iterator)
     -> ::libc::c_double;
    pub fn bson_iterator_int_raw(i: *const bson_iterator) -> ::libc::c_int;
    pub fn bson_iterator_long_raw(i: *const bson_iterator) -> int64_t;
    pub fn bson_iterator_bool_raw(i: *const bson_iterator) -> bson_bool_t;
    pub fn bson_iterator_oid(i: *const bson_iterator) -> *mut bson_oid_t;
    pub fn bson_iterator_string(i: *const bson_iterator)
     -> *const ::libc::c_char;
    pub fn bson_iterator_string_len(i: *const bson_iterator) -> ::libc::c_int;
    pub fn bson_iterator_code(i: *const bson_iterator)
     -> *const ::libc::c_char;
    pub fn bson_iterator_code_scope(i: *const bson_iterator, scope: *mut bson)
     -> ();
    pub fn bson_iterator_date(i: *const bson_iterator) -> bson_date_t;
    pub fn bson_iterator_time_t(i: *const bson_iterator) -> time_t;
    pub fn bson_iterator_bin_len(i: *const bson_iterator) -> ::libc::c_int;
    pub fn bson_iterator_bin_type(i: *const bson_iterator) -> ::libc::c_char;
    pub fn bson_iterator_bin_data(i: *const bson_iterator)
     -> *const ::libc::c_char;
    pub fn bson_iterator_regex(i: *const bson_iterator)
     -> *const ::libc::c_char;
    pub fn bson_iterator_regex_opts(i: *const bson_iterator)
     -> *const ::libc::c_char;
    pub fn bson_iterator_subobject(i: *const bson_iterator, sub: *mut bson)
     -> ();
    pub fn bson_iterator_subiterator(i: *const bson_iterator,
                                     sub: *mut bson_iterator) -> ();
    pub fn bson_oid_from_string(oid: *mut bson_oid_t,
                                str: *const ::libc::c_char) -> ();
    pub fn bson_oid_to_string(oid: *const bson_oid_t,
                              str: *mut ::libc::c_char) -> ();
    pub fn bson_oid_gen(oid: *mut bson_oid_t) -> ();
    pub fn bson_set_oid_fuzz(func:
                                 ::std::option::Option<extern "C" fn()
                                                           -> ::libc::c_int>)
     -> ();
    pub fn bson_set_oid_inc(func:
                                ::std::option::Option<extern "C" fn()
                                                          -> ::libc::c_int>)
     -> ();
    pub fn bson_oid_generated_time(oid: *mut bson_oid_t) -> time_t;
    pub fn bson_append(b: *mut bson, data: *const ::libc::c_void,
                       len: ::libc::c_int) -> ();
    pub fn bson_init(b: *mut bson) -> ();
    pub fn bson_init_as_query(b: *mut bson) -> ();
    pub fn bson_init_data(b: *mut bson, data: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn bson_init_finished_data(b: *mut bson, data: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn bson_init_size(b: *mut bson, size: ::libc::c_int) -> ();
    pub fn bson_init_on_stack(b: *mut bson, bstack: *mut ::libc::c_char,
                              mincapacity: ::libc::c_int,
                              maxonstack: ::libc::c_int) -> ();
    pub fn bson_ensure_space(b: *mut bson, bytesNeeded: ::libc::c_int)
     -> ::libc::c_int;
    pub fn bson_finish(b: *mut bson) -> ::libc::c_int;
    pub fn bson_destroy(b: *mut bson) -> ();
    pub fn bson_del(b: *mut bson) -> ();
    pub fn bson_reset(b: *mut bson) -> ();
    pub fn bson_empty(obj: *mut bson) -> *mut bson;
    pub fn bson_copy(out: *mut bson, _in: *const bson) -> ::libc::c_int;
    pub fn bson_append_oid(b: *mut bson, name: *const ::libc::c_char,
                           oid: *const bson_oid_t) -> ::libc::c_int;
    pub fn bson_append_new_oid(b: *mut bson, name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn bson_append_int(b: *mut bson, name: *const ::libc::c_char,
                           i: ::libc::c_int) -> ::libc::c_int;
    pub fn bson_append_long(b: *mut bson, name: *const ::libc::c_char,
                            i: int64_t) -> ::libc::c_int;
    pub fn bson_append_double(b: *mut bson, name: *const ::libc::c_char,
                              d: ::libc::c_double) -> ::libc::c_int;
    pub fn bson_append_string(b: *mut bson, name: *const ::libc::c_char,
                              str: *const ::libc::c_char) -> ::libc::c_int;
    pub fn bson_append_string_n(b: *mut bson, name: *const ::libc::c_char,
                                str: *const ::libc::c_char,
                                len: ::libc::c_int) -> ::libc::c_int;
    pub fn bson_append_symbol(b: *mut bson, name: *const ::libc::c_char,
                              str: *const ::libc::c_char) -> ::libc::c_int;
    pub fn bson_append_symbol_n(b: *mut bson, name: *const ::libc::c_char,
                                str: *const ::libc::c_char,
                                len: ::libc::c_int) -> ::libc::c_int;
    pub fn bson_append_code(b: *mut bson, name: *const ::libc::c_char,
                            str: *const ::libc::c_char) -> ::libc::c_int;
    pub fn bson_append_code_n(b: *mut bson, name: *const ::libc::c_char,
                              str: *const ::libc::c_char, len: ::libc::c_int)
     -> ::libc::c_int;
    pub fn bson_append_code_w_scope(b: *mut bson, name: *const ::libc::c_char,
                                    code: *const ::libc::c_char,
                                    scope: *const bson) -> ::libc::c_int;
    pub fn bson_append_code_w_scope_n(b: *mut bson,
                                      name: *const ::libc::c_char,
                                      code: *const ::libc::c_char,
                                      size: ::libc::c_int, scope: *const bson)
     -> ::libc::c_int;
    pub fn bson_append_binary(b: *mut bson, name: *const ::libc::c_char,
                              _type: ::libc::c_char,
                              str: *const ::libc::c_char, len: ::libc::c_int)
     -> ::libc::c_int;
    pub fn bson_append_bool(b: *mut bson, name: *const ::libc::c_char,
                            v: bson_bool_t) -> ::libc::c_int;
    pub fn bson_append_null(b: *mut bson, name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn bson_append_undefined(b: *mut bson, name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn bson_append_regex(b: *mut bson, name: *const ::libc::c_char,
                             pattern: *const ::libc::c_char,
                             opts: *const ::libc::c_char) -> ::libc::c_int;
    pub fn bson_append_bson(b: *mut bson, name: *const ::libc::c_char,
                            bson: *const bson) -> ::libc::c_int;
    pub fn bson_append_element(b: *mut bson,
                               name_or_null: *const ::libc::c_char,
                               elem: *const bson_iterator) -> ::libc::c_int;
    pub fn bson_append_timestamp(b: *mut bson, name: *const ::libc::c_char,
                                 ts: *mut bson_timestamp_t) -> ::libc::c_int;
    pub fn bson_append_timestamp2(b: *mut bson, name: *const ::libc::c_char,
                                  time: ::libc::c_int,
                                  increment: ::libc::c_int) -> ::libc::c_int;
    pub fn bson_append_date(b: *mut bson, name: *const ::libc::c_char,
                            millis: bson_date_t) -> ::libc::c_int;
    pub fn bson_append_time_t(b: *mut bson, name: *const ::libc::c_char,
                              secs: time_t) -> ::libc::c_int;
    pub fn bson_append_start_object(b: *mut bson, name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn bson_append_start_object2(b: *mut bson,
                                     name: *const ::libc::c_char,
                                     namelen: ::libc::c_int) -> ::libc::c_int;
    pub fn bson_append_start_array(b: *mut bson, name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn bson_append_start_array2(b: *mut bson, name: *const ::libc::c_char,
                                    namelen: ::libc::c_int) -> ::libc::c_int;
    pub fn bson_append_finish_object(b: *mut bson) -> ::libc::c_int;
    pub fn bson_append_finish_array(b: *mut bson) -> ::libc::c_int;
    pub fn bson_merge_recursive(b1: *const bson, b2: *const bson,
                                overwrite: bson_bool_t, out: *mut bson)
     -> ::libc::c_int;
    pub fn bson_check_duplicate_keys(bs: *const bson) -> bson_bool_t;
    pub fn bson_fix_duplicate_keys(bsi: *const bson, bso: *mut bson) -> ();
    pub fn bson_numstr(str: *mut ::libc::c_char, i: int64_t) -> ();
    pub fn bson_numstrn(str: *mut ::libc::c_char, maxbuf: ::libc::c_int,
                        i: int64_t) -> ::libc::c_int;
    pub fn bson_free(ptr: *mut ::libc::c_void) -> ();
    pub fn bson_malloc(size: ::libc::c_int) -> *mut ::libc::c_void;
    pub fn bson_realloc(ptr: *mut ::libc::c_void, size: ::libc::c_int)
     -> *mut ::libc::c_void;
    pub fn set_bson_err_handler(func: bson_err_handler) -> bson_err_handler;
    pub fn bson_fatal(ok: ::libc::c_int) -> ();
    pub fn bson_fatal_msg(ok: ::libc::c_int, msg: *const ::libc::c_char)
     -> ();
    pub fn bson_builder_error(b: *mut bson) -> ();
    pub fn bson_int64_to_double(i64: int64_t) -> ::libc::c_double;
    pub fn bson_swap_endian32(outp: *mut ::libc::c_void,
                              inp: *const ::libc::c_void) -> ();
    pub fn bson_swap_endian64(outp: *mut ::libc::c_void,
                              inp: *const ::libc::c_void) -> ();
    pub fn bson_append_field_from_iterator(from: *const bson_iterator,
                                           into: *mut bson) -> ::libc::c_int;
    pub fn bson_append_field_from_iterator2(key: *const ::libc::c_char,
                                            from: *const bson_iterator,
                                            into: *mut bson) -> ::libc::c_int;
    pub fn bson_append_object_from_iterator(key: *const ::libc::c_char,
                                            from: *mut bson_iterator,
                                            into: *mut bson) -> ::libc::c_int;
    pub fn bson_append_array_from_iterator(key: *const ::libc::c_char,
                                           from: *mut bson_iterator,
                                           into: *mut bson) -> ::libc::c_int;
    pub fn bson_merge(b1: *const bson, b2: *const bson,
                      overwrite: bson_bool_t, out: *mut bson)
     -> ::libc::c_int;
    pub fn bson_merge2(b1data: *const ::libc::c_void,
                       b2data: *const ::libc::c_void, overwrite: bson_bool_t,
                       out: *mut bson) -> ::libc::c_int;
    pub fn bson_merge_recursive2(b1data: *const ::libc::c_void,
                                 b2data: *const ::libc::c_void,
                                 overwrite: bson_bool_t, out: *mut bson)
     -> ::libc::c_int;
    pub fn bson_merge_fieldpaths(bsdata1: *const ::libc::c_void,
                                 bsdata2: *const ::libc::c_void,
                                 out: *mut bson) -> ::libc::c_int;
    pub fn bson_inplace_set_bool(pos: *mut bson_iterator, val: bson_bool_t)
     -> ::libc::c_int;
    pub fn bson_inplace_set_long(pos: *mut bson_iterator, val: int64_t)
     -> ::libc::c_int;
    pub fn bson_inplace_set_double(pos: *mut bson_iterator,
                                   val: ::libc::c_double) -> ::libc::c_int;
    pub fn bson_strip(ifields: *mut TCMAP, imode: u8,
                      bsbuf: *const ::libc::c_void, bsout: *mut bson,
                      matched: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn bson_strip2(sctx: *mut BSONSTRIPCTX) -> ::libc::c_int;
    pub fn bson_rename(fields: *mut TCMAP, bsbuf: *const ::libc::c_void,
                       bsout: *mut bson, rencnt: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn bson_compare(bsdata1: *const ::libc::c_void,
                        bsdata2: *const ::libc::c_void,
                        fpath: *const ::libc::c_char, fplen: ::libc::c_int)
     -> ::libc::c_int;
    pub fn bson_compare_fpaths(bsdata1: *const ::libc::c_void,
                               bsdata2: *const ::libc::c_void,
                               fpath1: *const ::libc::c_char,
                               fplen1: ::libc::c_int,
                               fpath2: *const ::libc::c_char,
                               fplen2: ::libc::c_int) -> ::libc::c_int;
    pub fn bson_compare_it_current(it1: *const bson_iterator,
                                   it2: *const bson_iterator)
     -> ::libc::c_int;
    pub fn bson_compare_string(cv: *const ::libc::c_char,
                               bsdata: *const ::libc::c_void,
                               fpath: *const ::libc::c_char) -> ::libc::c_int;
    pub fn bson_compare_long(cv: int64_t, bsdata: *const ::libc::c_void,
                             fpath: *const ::libc::c_char) -> ::libc::c_int;
    pub fn bson_compare_double(cv: ::libc::c_double,
                               bsdata: *const ::libc::c_void,
                               fpath: *const ::libc::c_char) -> ::libc::c_int;
    pub fn bson_compare_bool(cv: bson_bool_t, bsdata: *const ::libc::c_void,
                             fpath: *const ::libc::c_char) -> ::libc::c_int;
    pub fn bson_dup(src: *const bson) -> *mut bson;
    pub fn bson_create_from_iterator(from: *mut bson_iterator) -> *mut bson;
    pub fn bson_create_from_buffer(buf: *const ::libc::c_void,
                                   bufsz: ::libc::c_int) -> *mut bson;
    pub fn bson_create_from_buffer2(bs: *mut bson, buf: *const ::libc::c_void,
                                    bufsz: ::libc::c_int) -> *mut bson;
    pub fn bson_init_with_data(bs: *mut bson, bsdata: *const ::libc::c_void)
     -> ();
    pub fn bson_merge_arrays(mbuf: *const ::libc::c_void,
                             inbuf: *const ::libc::c_void,
                             mode: bson_merge_array_mode, expandall: u8,
                             bsout: *mut bson) -> ::libc::c_int;
    pub fn bson_find_unmerged_arrays(mbuf: *const ::libc::c_void,
                                     inbuf: *const ::libc::c_void) -> u8;
    pub fn bson_find_merged_arrays(mbuf: *const ::libc::c_void,
                                   inbuf: *const ::libc::c_void,
                                   expandall: u8) -> u8;
    pub fn bson2json(bsdata: *const ::libc::c_char,
                     buf: *mut *mut ::libc::c_char, sp: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn json2bson(jsonstr: *const ::libc::c_char) -> *mut bson;
    pub fn bson_validate(bs: *mut bson, checkdots: u8, checkdollar: u8)
     -> ::libc::c_int;
    pub fn ejdbversion() -> *const ::libc::c_char;
    pub fn ejdbformatversion(jb: *mut EJDB) -> uint32_t;
    pub fn ejdbformatversionmajor(jb: *mut EJDB) -> uint8_t;
    pub fn ejdbformatversionminor(jb: *mut EJDB) -> uint16_t;
    pub fn ejdbformatversionpatch(jb: *mut EJDB) -> uint16_t;
    pub fn ejdbisvalidoidstr(oid: *const ::libc::c_char) -> u8;
    pub fn ejdberrmsg(ecode: ::libc::c_int) -> *const ::libc::c_char;
    pub fn ejdbecode(jb: *mut EJDB) -> ::libc::c_int;
    pub fn ejdbnew() -> *mut EJDB;
    pub fn ejdbdel(jb: *mut EJDB) -> ();
    pub fn ejdbclose(jb: *mut EJDB) -> u8;
    pub fn ejdbopen(jb: *mut EJDB, path: *const ::libc::c_char,
                    mode: ::libc::c_int) -> u8;
    pub fn ejdbisopen(jb: *mut EJDB) -> u8;
    pub fn ejdbgetcoll(jb: *mut EJDB, colname: *const ::libc::c_char)
     -> *mut EJCOLL;
    pub fn ejdbgetcolls(jb: *mut EJDB) -> *mut TCLIST;
    pub fn ejdbcreatecoll(jb: *mut EJDB, colname: *const ::libc::c_char,
                          opts: *mut EJCOLLOPTS) -> *mut EJCOLL;
    pub fn ejdbrmcoll(jb: *mut EJDB, colname: *const ::libc::c_char,
                      unlinkfile: u8) -> u8;
    pub fn ejdbsavebson(coll: *mut EJCOLL, bs: *mut bson,
                        oid: *mut bson_oid_t) -> u8;
    pub fn ejdbsavebson2(jcoll: *mut EJCOLL, bs: *mut bson,
                         oid: *mut bson_oid_t, merge: u8) -> u8;
    pub fn ejdbsavebson3(jcoll: *mut EJCOLL, bsdata: *const ::libc::c_void,
                         oid: *mut bson_oid_t, merge: u8) -> u8;
    pub fn ejdbrmbson(coll: *mut EJCOLL, oid: *mut bson_oid_t) -> u8;
    pub fn ejdbloadbson(coll: *mut EJCOLL, oid: *const bson_oid_t)
     -> *mut bson;
    pub fn ejdbcreatequery(jb: *mut EJDB, qobj: *mut bson, orqobjs: *mut bson,
                           orqobjsnum: ::libc::c_int, hints: *mut bson)
     -> *mut EJQ;
    pub fn ejdbcreatequery2(jb: *mut EJDB, qbsdata: *const ::libc::c_void)
     -> *mut EJQ;
    pub fn ejdbqueryaddor(jb: *mut EJDB, q: *mut EJQ,
                          orbsdata: *const ::libc::c_void) -> *mut EJQ;
    pub fn ejdbqueryhints(jb: *mut EJDB, q: *mut EJQ,
                          hintsbsdata: *const ::libc::c_void) -> *mut EJQ;
    pub fn ejdbquerydel(q: *mut EJQ) -> ();
    pub fn ejdbsetindex(coll: *mut EJCOLL, ipath: *const ::libc::c_char,
                        flags: ::libc::c_int) -> u8;
    pub fn ejdbqryexecute(jcoll: *mut EJCOLL, q: *const EJQ,
                          count: *mut uint32_t, qflags: ::libc::c_int,
                          log: *mut TCXSTR) -> EJQRESULT;
    pub fn ejdbqresultnum(qr: EJQRESULT) -> ::libc::c_int;
    pub fn ejdbqresultbsondata(qr: EJQRESULT, pos: ::libc::c_int,
                               size: *mut ::libc::c_int)
     -> *const ::libc::c_void;
    pub fn ejdbqresultdispose(qr: EJQRESULT) -> ();
    pub fn ejdbupdate(jcoll: *mut EJCOLL, qobj: *mut bson, orqobjs: *mut bson,
                      orqobjsnum: ::libc::c_int, hints: *mut bson,
                      log: *mut TCXSTR) -> uint32_t;
    pub fn ejdbqrydistinct(jcoll: *mut EJCOLL, fpath: *const ::libc::c_char,
                           qobj: *mut bson, orqobjs: *mut bson,
                           orqobjsnum: ::libc::c_int, count: *mut uint32_t,
                           log: *mut TCXSTR) -> *mut bson;
    pub fn ejdbsyncoll(jcoll: *mut EJCOLL) -> u8;
    pub fn ejdbsyncdb(jb: *mut EJDB) -> u8;
    pub fn ejdbtranbegin(coll: *mut EJCOLL) -> u8;
    pub fn ejdbtrancommit(coll: *mut EJCOLL) -> u8;
    pub fn ejdbtranabort(coll: *mut EJCOLL) -> u8;
    pub fn ejdbtranstatus(jcoll: *mut EJCOLL, txactive: *mut u8) -> u8;
    pub fn ejdbmeta(jb: *mut EJDB) -> *mut bson;
    pub fn ejdbexport(jb: *mut EJDB, path: *const ::libc::c_char,
                      cnames: *mut TCLIST, flags: ::libc::c_int,
                      log: *mut TCXSTR) -> u8;
    pub fn ejdbimport(jb: *mut EJDB, path: *const ::libc::c_char,
                      cnames: *mut TCLIST, flags: ::libc::c_int,
                      log: *mut TCXSTR) -> u8;
    pub fn ejdbcommand(jb: *mut EJDB, cmdbson: *mut bson) -> *mut bson;
    pub fn ejdbcommand2(jb: *mut EJDB, cmdbsondata: *mut ::libc::c_void)
     -> *mut bson;
}
